#include "crypto.h"

int encrypt(XAxiDma *dma_ptr, TxBuffer* tx_buffer_ptr, RxBuffer* rx_buffer_ptr) {
	int payload_length = tx_buffer_ptr->header.payload_length;

	Xil_DCacheFlushRange((UINTPTR)tx_buffer_ptr, TX_BUFFER_INITIAL_LENGTH + alignToBlock(payload_length));
	Xil_DCacheFlushRange((UINTPTR)rx_buffer_ptr, alignToBlock(payload_length) + TAG_LENGTH);

	Status = XAxiDma_SimpleTransfer(dma_ptr,(UINTPTR) rx_buffer_ptr,
			alignToBlock(payload_length) + TAG_LENGTH, XAXIDMA_DEVICE_TO_DMA);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XAxiDma_SimpleTransfer(dma_ptr,(UINTPTR) tx_buffer_ptr,
			TX_BUFFER_INITIAL_LENGTH + alignToBlock(payload_length), XAXIDMA_DMA_TO_DEVICE);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}
int decrypt(XAxiDma *dma_ptr, TxBuffer* tx_buffer, RxBuffer* rx_buffer_ptr) {

}

void fillTxBuffer(TxBuffer* tx_buffer, int payload_length) {
	// Set Key
	u8 dummy_key[] = {72,139,79,112,133,147,28,185,115,73,198,190,210,70,127,215,9,180,47,197,123,59,183,180,75,15,233,159,107,13,220,32};
	for (int i = 0; i < KEY_LENGTH; i++)
		tx_buffer->key[i] = dummy_key[i];

	// Set Crypto Header
	tx_buffer->header.source_dest_ID = 0x01;
	tx_buffer->header.key_index = 0x02;
	tx_buffer->header.payload_length = payload_length;
	tx_buffer->header.reset_replay_counter = 04;
	for (int i = 0; i < 6; i++)
		tx_buffer->header.replay_counter[i] = 0x05 + i;

	// Set Plaintext
	for (int i = 0; i < payload_length; i++)
	tx_buffer->plaintext[i] = i;
}

int checkRxBuffer(TxBuffer* tx_buffer, RxBuffer* rx_buffer, int payload_length)
{
	// Check Encrypted Payload
	for (int i = 0; i < payload_length; i++) {
		if (rx_buffer->data[i] != (tx_buffer->plaintext[i] ^ tx_buffer->key[i % 16])) {
			xil_printf("Payload incorrect \r\n");
			return XST_FAILURE;
		}
	}
	payload_length = alignToBlock(payload_length);

	// Check Tag
	u8* AAD = &(tx_buffer->reserved[0]);
	for (int i = 0; i < TAG_LENGTH; i++) {
		if (rx_buffer->data[payload_length + i] != (AAD[i] ^ tx_buffer->key[16 + i])) {
			xil_printf("Tag incorrect \r\n");
			return XST_FAILURE;
		}
	}
	xil_printf("Payload and Tag correct \r\n");
	return XST_SUCCESS;
}

void printTxBuffer(TxBuffer* tx_buffer, int payload_length) {
	xil_printf("----------- TxBuffer Start -----------\r\n");
	xil_printf("\r\n");

	u8* buffer = (u8*) tx_buffer;
	for (int i = 0; i < TX_BUFFER_INITIAL_LENGTH + payload_length; i++) {
		xil_printf("%02x ", buffer[i]);
		if (i % 4 == 3) {
			xil_printf("\r\n");
		}
		if (i % NUMBER_BYTES_PER_BLOCK == 15) {
			xil_printf("\r\n");
		}
	}
	xil_printf("------------ TxBuffer End ------------\r\n");
}

void printRxBuffer(RxBuffer* rx_buffer, int payload_length) {
	xil_printf("----------- RxBuffer Start -----------\r\n");
	xil_printf("\r\n");
	for (int i = 0; i < payload_length + TAG_LENGTH; i++) {
		xil_printf("%02x ", rx_buffer->data[i]);
		if (i % 4 == 3) {
			xil_printf("\r\n");
		}
		if (i % NUMBER_BYTES_PER_BLOCK == 15) {
			xil_printf("\r\n");
		}
	}
	xil_printf("------------ RxBuffer End ------------\r\n");
}

int alignToBlock(int payload_length) {
	int remainder = payload_length % NUMBER_BYTES_PER_BLOCK;
	if (remainder > 0) {
		return payload_length + (NUMBER_BYTES_PER_BLOCK - remainder);
	} else {
		return payload_length;
	}
}
