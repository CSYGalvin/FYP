#ifndef CRYPTO_H /* prevent circular inclusions */
#define CRYPTO_H /* by using protection macros */

#include "xaxidma.h"
#include "xparameters.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xil_util.h"
#include "xscugic.h"

int InitDMA();
u32 DMA_Xfer(UINTPTR BuffAddr, u32 Length, int Direction);

#define MAX_PAYLOAD_LENGTH 65536
#define NUMBER_BYTES_PER_BLOCK 16
#define KEY_LENGTH 32
#define AAD_LENGTH 16
#define TAG_LENGTH 16
#define BLOCK_LENGTH 16
#define TX_BUFFER_INITIAL_LENGTH (KEY_LENGTH + AAD_LENGTH)

#define GROUND_STATION_TO_SAT_1 0x11
#define GROUND_STATION_TO_SAT_2 0x12
#define GROUND_STATION_TO_SAT_3 0x13
#define SAT_1_TO_GROUND_STATION 0x11
#define SAT_2_TO_GROUND_STATION 0x21
#define SAT_3_TO_GROUND_STATION 0x31

typedef struct CryptoHeader {
	u8 source_dest_ID;
	u8 key_index;
	u16 payload_length;
	u16 reset_replay_counter;
	u8 replay_counter[6];
} CryptoHeader;

typedef struct TxBuffer {
	u8 key[KEY_LENGTH];
	u8 reserved[4];
	CryptoHeader header;
	u8 payload[MAX_PAYLOAD_LENGTH];
} TxBuffer;

typedef struct RxBuffer {
	u8 data[MAX_PAYLOAD_LENGTH + TAG_LENGTH];
} RxBuffer;

int encrypt(TxBuffer* tx_buffer_ptr, RxBuffer* rx_buffer_ptr);

/************ Function to verify correctness of encrypt function ************/
int checkRxBuffer(TxBuffer* tx_buffer_ptr, RxBuffer* rx_buffer_ptr);

/************ Function for filling with dummy data and dummy key ************/
void fillTxBuffer(TxBuffer* tx_buffer_ptr, int payload_length);
void fillDummyKey(TxBuffer* tx_buffer_ptr);

/************ Utility Functions ************/
int alignToBlock(int payload_length);

/************ Functions for printing ************/
void printTxBuffer(TxBuffer* tx_buffer_ptr);
void printRxBuffer(RxBuffer* rx_buffer_ptr, int payload_length);

#endif
